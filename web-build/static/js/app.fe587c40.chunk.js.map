{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/About.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","components/StyledText.tsx","components/chatbot/ChatInput.tsx","store/Actions.tsx","components/chatbot/Chatbot.tsx","components/knowledge/KnowledgeComponent.tsx","components/knowledge/ArticleSuggestion.tsx","screens/TabOneScreen.tsx","components/dataset/KnowledgeInput.tsx","components/dataset/KnowledgeDataset.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","store/ChatbotReducer.tsx","store/KnowledgeReducer.tsx","store/RootReducer.tsx","store/Store.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf","assets/fonts/NotoMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","orange","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","EditScreenInfo","path","styles","getStartedContainer","getStartedText","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","alignItems","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightContainer","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","margin","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","height","width","NotFoundScreen","navigation","replace","link","linkText","padding","MonoText","fontFamily","ChatInput","dispatch","useDispatch","useState","onChangeText","id","useSelector","state","ChatbotReducer","messages","loading","handleOnSubmit","type","payload","userMessage","name","setTimeout","inputContainer","TextInput","input","onKeyPress","e","nativeEvent","key","enablesReturnKeyAutomatically","value","placeholder","Pressable","button","buttonText","flexDirection","borderWidth","borderColor","marginBottom","marginLeft","Chatbot","bottomListRef","useRef","useEffect","lastMessage","length","log","chatLog","map","message","formatChatLog","axios","post","chat_log","then","response","console","data","answer","articles","current","scrollToEnd","animated","catch","error","SafeAreaView","chatbotContainer","ScrollView","scroll","ref","FlatList","renderItem","item","botTextContainer","nameText","userTextContainer","keyExtractor","toString","chatBubbles","display","borderRightColor","borderTopColor","borderLeftColor","borderBottomColor","borderTopLeftRadius","borderBottomLeftRadius","chatbotList","borderBottomWidth","scrollComponentStyles","messageContainer","maxWidth","minWidth","alignSelf","paddingLeft","KnowledgeComponent","containerStyle","Title","articleTitle","Divider","Image","image","source","uri","articleBody","body","articleTagContainer","tag","podcastTag","url","icon","tvParallaxProperties","buttonStyle","marginRight","titleStyle","paddingRight","letterSpacing","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","ArticleSuggestion","KnowledgeReducer","knowledgeContainer","borderTopRightRadius","borderBottomRightRadius","articleContainer","TabOneScreen","botStatus","setBotStatus","setHeight","get","pingChatbot","titleContainer","statusContainer","statusText","statusTextConnected","subTitle","onLayout","event","layout","textDecorationLine","KnowledgeInput","query","knowledge","onChange","KnowledgeDataset","podcasts","filterState","setFilterState","combinedKnowledge","setCombinedKnowledge","concat","filter","knowledgeCard","toLowerCase","includes","datasetContainer","contentContainerStyle","listView","sidebar","sidebarTitle","sidebarStatsContainer","sidebarResultsContainer","resultsText","articleTextContainer","paddingTop","TabTwoScreen","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","About","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","TabBarIcon","headerRight","navigate","opacity","pressed","FontAwesome","size","initialState","action","slice","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","require","warn","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.fe587c40.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    orange: '#F2A900',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    orange: '#F2A900',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          A question & answer AI bot that also suggests articles/podcasts based on your questions.\n          Bitcoin Knowledge Bot is powered by GPT-3 and trained on an open source dataset of established Bitcoin knowledge\n        </Text>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          The idea behind this project was to currate high signal Bitcoin knowledge that avoids shitcoins, FUD, and general Bitcoin disinformation.\n          Currating this data this allows us to train a simple GPT3 model for chat and a tensorflow ranking model for knowledge suggestions that is far more trustworthy and useful due to it's transparent Bitcoin focused datasets.\n        </Text>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Bitcoin knowledge bot is open source, you can pull down the repo, see the datasets, and even generate them yourself.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Github\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://github.com/bitcoin-knowledge'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n    margin: 30\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport About from '../components/About';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>About</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <About path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'noto-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TextInput, Pressable, NativeSyntheticEvent, TextInputKeyPressEventData } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MonoText } from '../StyledText';\nimport { Text, View } from '../Themed';\nimport { useState } from 'react';\nimport { UPDATE_ID, SET_NEW_MESSAGE } from '../../store/Actions';\n\nexport default function ChatInput() {\n  const dispatch = useDispatch();\n  const [text, onChangeText] = useState('');\n  const messages = useSelector((state: any) => state.ChatbotReducer.messages);\n  const loading = useSelector((state: any) => state.ChatbotReducer.loading);\n  const id = useSelector((state: any) => state.ChatbotReducer.id);\n\n  const handleOnSubmit = () => {\n    onChangeText('');\n    // create user message from prompt\n    dispatch({ type: UPDATE_ID, payload: id + 1 });\n    const userMessage = {\n      id: id,\n      text: text,\n      name: \"User\"\n    }\n    // add user message to messages\n    setTimeout(() => {\n      dispatch({ type: SET_NEW_MESSAGE, payload: userMessage });\n    }, 1000)\n  }\n\n  const handleKeyPress = (e: NativeSyntheticEvent<TextInputKeyPressEventData>) => {\n    if (e.nativeEvent.key === 'Enter') {\n      handleOnSubmit();\n    }\n  }\n\n  return (\n    <View style={styles.inputContainer}>\n        <TextInput style={styles.input} onChangeText={onChangeText} onKeyPress={handleKeyPress} enablesReturnKeyAutomatically={true} value={text} placeholder='Type your message here...' />\n        <Pressable style={styles.button} onPress={() => handleOnSubmit()}>\n            <MonoText style={styles.buttonText}>send</MonoText>\n        </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    width: '80%',\n    flexDirection: 'row',\n    borderWidth: 2,\n    padding: 10,\n    alignItems: 'center',\n    borderColor: '#F2A900',\n    borderRadius: 15,\n    marginBottom: 5,\n  },\n  input: {\n    width: '99%',\n    backgroundColor: 'white',\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 5,\n  },\n  buttonText: {\n    fontSize: 15,\n  },\n  button: {\n    width: '20%',\n    padding: 10,\n    marginLeft: 10,\n    borderWidth: 1,\n    borderColor: '#F2A900',\n    borderRadius: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'black',\n  },\n});\n","export const SET_NEW_MESSAGE = 'SET_NEW_MESSAGE';\nexport const RECEIVE_BOT_RESPONSE = 'RECEIVE_BOT_RESPONSE';\nexport const UPDATE_ID = 'UPDATE_ID';\nexport const SET_LOADING = 'SET_LOADING';\nexport const UPDATE_ARTICLES = 'UPDATE_ARTICLES';\nexport const UPDATE_ALL_KNOWLEDGE = 'UPDATE_ALL_KNOWLEDGE';\nexport const UPDATE_QUERY = 'UPDATE_QUERY';\nexport const UPDATE_ALL_PODCASTS = 'UPDATE_ALL_PODCASTS';","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, FlatList, SafeAreaView, ScrollView } from 'react-native';\nimport ReactLoading from 'react-loading';\nimport { Message } from \"../../types\" \nimport { MonoText } from '../StyledText';\nimport { Text, View } from '../Themed';\nimport { useState, useRef, useEffect } from 'react';\nimport ChatInput from './ChatInput';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { UPDATE_ID, SET_NEW_MESSAGE, UPDATE_ARTICLES, SET_LOADING } from '../../store/Actions';\n\nexport default function Chatbot({ path, height}: { path: string, height: number }) {\n  const dispatch = useDispatch();\n  const messages = useSelector((state: any) => state.ChatbotReducer.messages);\n  const loading = useSelector((state: any) => state.ChatbotReducer.loading);\n  const id = useSelector((state: any) => state.ChatbotReducer.id);\n  const bottomListRef: any = useRef();\n\n  const formatChatLog = () => {\n    let chatLog = ''\n    messages.map((message: any) => {\n      // Skip over the bot greeting\n      if (message.id > 3) {\n        chatLog += `${message.name}: ${message.text}\\n\\n###\\n\\n`\n      }\n      return null\n    })\n    return chatLog\n  }\n\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage && lastMessage.name === 'User') {\n      dispatch({ type: SET_LOADING, payload: true });\n      const log = formatChatLog()\n      axios.post(\"https://bitcoin-knowledge-bot.herokuapp.com/ask\", {chat_log: log})\n      .then(response => {\n        console.log(response)\n        setTimeout(() => {\n          dispatch({ type: UPDATE_ID, payload: id + 1 });\n          dispatch({ type: SET_NEW_MESSAGE, payload: { id: messages.length + 1, text: response.data.answer, name: 'Bot' } });\n          dispatch({ type: UPDATE_ARTICLES, payload: response.data.articles });\n          dispatch({ type: SET_LOADING, payload: false });\n          // Now autoscroll to the bottom of the list\n          bottomListRef.current.scrollToEnd({animated: true});\n        }, 3000)\n      })\n      .catch(error => {\n          console.log(error)\n      })\n    }\n  }, [messages])\n\n  const renderData = ({ item }: any) => {\n    return(\n      item.name === 'Bot' ?\n        <View style={styles.botTextContainer}>\n          <MonoText style={styles.nameText}>Bot: </MonoText>\n          <MonoText>{item.text}</MonoText>\n        </View>\n        :\n        <View style={styles.userTextContainer}>\n          <MonoText style={styles.nameText}>User: </MonoText>\n          <MonoText>{item.text}</MonoText>\n        </View>\n    )\n  }\n\n  return (\n      <SafeAreaView style={styles.chatbotContainer}>\n        <ScrollView style={styles.scroll} ref={bottomListRef}>\n          <FlatList\n            data={messages}\n            renderItem={renderData}\n            keyExtractor={(item: Message) => item.id.toString()}\n          />\n          {loading ?\n          <View style={styles.chatBubbles}>\n            <ReactLoading type={'bubbles'} color={\"#F2A900\"} height={\"10%\"} width={\"10%\"} />\n          </View>\n          : null}\n        </ScrollView>\n          <ChatInput />\n      </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  chatbotContainer: {\n    display: 'flex',\n    width: '50%',\n    height: '87%',\n    backgroundColor: 'black',\n    borderWidth: 4,\n    borderRightColor: '#F2A900',\n    borderTopColor: '#F2A900',\n    borderLeftColor: '#F2A900',\n    borderBottomColor: '#F2A900',\n    borderTopLeftRadius: 15,\n    borderBottomLeftRadius: 15,\n    alignItems: 'center',\n  },\n  chatbotList: {\n    width: '100%',\n    height: '100%',\n  },\n  scroll: {\n    height: '100%',\n    marginBottom: 5,\n    backgroundColor: '#708090',\n    borderBottomColor: 'white',\n    borderBottomWidth: 1,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  scrollComponentStyles: {\n    borderWidth: 4,\n    borderTopColor: 'white',\n  },\n  messageContainer: {\n    width: '100%',\n    display: 'flex',\n    backgroundColor: '#708090',\n  },\n  botTextContainer: {\n    maxWidth: '55%',\n    minWidth: '5%',\n    alignSelf: 'flex-start',\n    borderWidth: 2,\n    borderColor: '#F2A900',\n    borderRadius: 10,\n    padding: 10,\n    margin: 7,\n  },\n  userTextContainer: {\n    maxWidth: '55%',\n    minWidth: '5%',\n    alignSelf: 'flex-end',\n    borderWidth: 2,\n    borderColor: '#F2A900',\n    borderRadius: 10,\n    padding: 10,\n    margin: 7,\n  },\n  nameText: {\n    fontSize: 15,\n    marginBottom: 7,\n  },\n  chatBubbles: {\n    backgroundColor: 'transparent',\n    paddingLeft: '1%'\n  }\n});\n","import { StyleSheet, FlatList, SafeAreaView, ScrollView, Pressable } from 'react-native';\nimport * as WebBrowser from 'expo-web-browser';\nimport {Card, Button, Icon} from \"react-native-elements\";\nimport { MonoText } from '../StyledText';\nimport { View } from '../Themed';\n\nexport const KnowledgeComponent = ({ item }: any) => {\n    return(\n      <Card containerStyle={{width: 600, margin: 'auto', marginBottom: 25, marginTop: 15, borderColor: 'black', borderRadius: 10, borderWidth: 2, backgroundColor:'oldlace'}}>\n        <Card.Title style={styles.articleTitle}>{item.title}</Card.Title>\n        <Card.Divider/>\n        <Card.Image style={styles.image} source={item.image == null ? {uri: 'https://bitcoin.org/img/icons/opengraph.png?1648897668'} : {uri: item.image}} />\n        <MonoText style={styles.articleBody}>\n            {item.body}\n        </MonoText>\n        <Card.Divider/>\n          <View style={styles.articleTagContainer}>\n            <MonoText style={item.type == 'podcast' ? styles.tag : styles.podcastTag}>{item.type}</MonoText>\n          </View>\n        <Button\n            onPress={() => WebBrowser.openBrowserAsync(item.url)}\n            icon={<Icon tvParallaxProperties={null} name='code' color='black' />}\n            buttonStyle={{borderRadius: 5, marginLeft: 0, marginRight: 0, marginBottom: 0, backgroundColor: '#F2A900', borderColor: 'black', borderWidth: 1}}\n            titleStyle={{color: 'black'}}\n            title='READ' />\n    </Card>\n    )\n  }\n\n  const styles = StyleSheet.create({\n    image: {\n      alignSelf: 'center',\n      marginTop: 5,\n      marginBottom: 5,\n    },\n    articleTitle: {\n      textAlign: 'center',\n      fontSize: 18,\n    },\n    articleBody: {\n      marginTop: 10,\n      marginBottom: 10,\n      color: 'black',\n      textAlign: 'center',\n      fontSize: 13,\n    },\n    articleTagContainer: {\n      padding: 5,\n      marginBottom: 10,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      backgroundColor: 'transparent',\n    },\n    tag: {\n      borderWidth: 1,\n      borderColor: 'black',\n      padding: 5,\n      paddingLeft: 15,\n      paddingRight: 15,\n      borderRadius: 7,\n      color: 'black',\n      fontSize: 13,\n      fontWeight: 'bold',\n      letterSpacing: 2,\n      backgroundColor: '#8BCDDE',\n      shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n    },\n    podcastTag: {\n      borderWidth: 1,\n      borderColor: 'black',\n      padding: 5,\n      paddingLeft: 15,\n      paddingRight: 15,\n      borderRadius: 7,\n      color: 'black',\n      fontSize: 13,\n      fontWeight: 'bold',\n      letterSpacing: 2,\n      backgroundColor: '#55DDBB',\n      shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n    }\n  });\n  ","import { StyleSheet, FlatList, SafeAreaView, ScrollView } from 'react-native';\nimport ReactLoading from 'react-loading';\nimport { KnowledgeComponent } from './KnowledgeComponent';\nimport { MonoText } from '../StyledText';\nimport { View } from '../Themed';\nimport { useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function ArticleSuggestion() {\n  const loading = useSelector((state: any) => state.ChatbotReducer.loading);\n  const articles = useSelector((state: any) => state.KnowledgeReducer.articles);\n  const bottomListRef: any = useRef();\n\n  return (\n      <SafeAreaView style={styles.knowledgeContainer}>\n        <ScrollView style={styles.scroll} ref={bottomListRef}>\n          <MonoText style={{fontWeight: '900', textAlign: 'center', margin: '3%'}}>Article suggestions coming soon</MonoText>\n          <FlatList\n            data={articles}\n            renderItem={KnowledgeComponent}\n          />\n          {loading ?\n          <View style={styles.chatBubbles}>\n            <ReactLoading type={'spinningBubbles'} color={\"#F2A900\"} height={\"10%\"} width={\"10%\"} />\n          </View>\n          : null}\n        </ScrollView>\n      </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  knowledgeContainer: {\n    display: 'flex',\n    width: '50%',\n    height: '87%',\n    backgroundColor: 'black',\n    borderWidth: 4,\n    borderRightColor: '#F2A900',\n    borderTopColor: '#F2A900',\n    borderLeftColor: '#F2A900',\n    borderBottomColor: '#F2A900',\n    borderTopRightRadius: 15,\n    borderBottomRightRadius: 15,\n    alignItems: 'center',\n  },\n  scroll: {\n    height: '100%',\n    width: '100%',\n    backgroundColor: '#708090',\n    borderBottomRightRadius: 10,\n  },\n  articleContainer: {\n    maxWidth: '95%',\n    alignSelf: 'center',\n    borderWidth: 2,\n    borderColor: '#F2A900',\n    borderRadius: 10,\n    padding: 10,\n    margin: 7,\n  },\n  chatBubbles: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    paddingLeft: '1%'\n  },\n  buttonText: {\n    fontSize: 15,\n  },\n  button: {\n    width: '15%',\n    marginTop: '3%',\n    padding: 10,\n    borderWidth: 1,\n    borderColor: '#F2A900',\n    borderRadius: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'black',\n  },\n  image: {\n    alignSelf: 'center',\n    marginTop: 5,\n    marginBottom: 5,\n  },\n  articleTitle: {\n    textAlign: 'center',\n    fontSize: 18,\n  },\n  articleBody: {\n    marginTop: 10,\n    marginBottom: 10,\n    color: 'black',\n    textAlign: 'center',\n    fontSize: 13,\n  },\n  articleTagContainer: {\n    padding: 5,\n    marginBottom: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    backgroundColor: 'transparent',\n  },\n  tag: {\n    borderWidth: 1,\n    borderColor: 'black',\n    padding: 5,\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderRadius: 5,\n    color: 'black',\n    fontSize: 13,\n    fontWeight: 'bold',\n    letterSpacing: 2,\n    backgroundColor: '#8BCDDE'\n  },\n  podcastTag: {\n    borderWidth: 1,\n    borderColor: 'black',\n    padding: 5,\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderRadius: 5,\n    color: 'black',\n    fontSize: 13,\n    fontWeight: 'bold',\n    letterSpacing: 2,\n    backgroundColor: '#55DDBB'\n  }\n});\n","import { StyleSheet } from 'react-native';\nimport axios from 'axios';\nimport { MonoText } from '../components/StyledText';\nimport Chatbot from '../components/chatbot/Chatbot';\nimport ArticleSuggestion from '../components/knowledge/ArticleSuggestion';\nimport { View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport { useEffect, useState } from 'react';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  const [botStatus, setBotStatus] = useState<string>('Loading...');\n  const [height, setHeight] = useState(0);\n  useEffect(() => {\n    axios.get(\"https://bitcoin-knowledge-bot.herokuapp.com/\")\n    .then(response => {\n        setBotStatus(response.data)\n        pingChatbot()\n    })\n    .catch(error => {\n        console.log(error)\n    })\n},[]);\n\nconst pingChatbot = () => {\n  axios.get(\"https://bitcoin-knowledge-bot.herokuapp.com/ping\")\n}\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.titleContainer}>\n        <MonoText style={styles.title}>Knowledge Bot</MonoText>\n        <View style={styles.statusContainer}>\n            <MonoText>Status:</MonoText>\n            <MonoText style={botStatus === 'Loading...' ? styles.statusText : styles.statusTextConnected}>{botStatus}</MonoText>\n        </View>\n        <MonoText style={styles.subTitle}>A question & answer AI bot that also suggests articles/podcasts {\"\\n\"} Powered by GPT-3 and trained on an open source dataset of established Bitcoin knowledge</MonoText>\n        <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      </View>\n      <View style={styles.knowledgeContainer} onLayout={(event) => {\n      const {height} = event.nativeEvent.layout;\n        setHeight(height);\n      }}>\n        <Chatbot path='/screens/TabOneScreen.tsx' height={height}/>\n        <ArticleSuggestion />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 15,\n  },\n  titleContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  statusContainer: {\n    width: '25%',\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  subTitle: {\n    fontSize: 15,\n    textAlign: 'center',\n  },\n  statusText: {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'red',\n    textDecorationLine: 'underline',\n  },\n  statusTextConnected: {\n    fontSize: 15,\n    textAlign: 'center',\n    textDecorationLine: 'underline',\n    color: '#39ff14',\n  },\n  separator: {\n    marginVertical: 10,\n    height: 2,\n    width: '150%',\n  },\n  knowledgeContainer: {\n    width: '100%',\n    height: '100%',\n    flexDirection: 'row',\n    padding: 2,\n  },\n});\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TextInput, Pressable, NativeSyntheticEvent, TextInputKeyPressEventData } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MonoText } from '../StyledText';\nimport { Text, View } from '../Themed';\nimport { useEffect, useState } from 'react';\nimport { UPDATE_ID, SET_NEW_MESSAGE, UPDATE_QUERY } from '../../store/Actions';\n\nexport default function KnowledgeInput() {\n  const dispatch = useDispatch();\n  const query = useSelector((state: any) => state.KnowledgeReducer.query);\n  const knowledge = useSelector((state: any) => state.KnowledgeReducer.knowledge);\n  const id = useSelector((state: any) => state.ChatbotReducer.id);\n\n  const handleChange = (event: any) => {\n    dispatch({type: UPDATE_QUERY, payload: event.nativeEvent.text});\n  }\n\n  return (\n    <View style={styles.inputContainer}>\n        <TextInput style={styles.input} onChange={handleChange} enablesReturnKeyAutomatically={true} value={query} placeholder='Type your search query here...' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    width: '100%',\n    flexDirection: 'row',\n    borderWidth: 2,\n    padding: 10,\n    alignItems: 'center',\n  },\n  input: {\n    width: '99%',\n    backgroundColor: 'white',\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 5,\n  },\n  buttonText: {\n    fontSize: 15,\n  },\n  button: {\n    width: '20%',\n    padding: 10,\n    marginLeft: 10,\n    borderWidth: 1,\n    borderColor: '#F2A900',\n    borderRadius: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'black',\n  },\n});\n","import * as WebBrowser from 'expo-web-browser';\nimport axios from 'axios';\nimport {Card, Button, Icon} from \"react-native-elements\";\nimport { StyleSheet, FlatList, ScrollView, Pressable, Image } from 'react-native';\nimport ReactLoading from 'react-loading';\nimport { KnowledgeComponent } from '../knowledge/KnowledgeComponent';\nimport { MonoText } from '../StyledText';\nimport { View } from '../Themed';\nimport { useState, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SET_LOADING, UPDATE_ALL_KNOWLEDGE, UPDATE_ALL_PODCASTS } from '../../store/Actions';\nimport KnowledgeInput from './KnowledgeInput';\n\nexport default function KnowledgeDataset({ path }: { path: string }) {\n  const dispatch = useDispatch();\n  const [height, setHeight] = useState(0);\n  const loading = useSelector((state: any) => state.ChatbotReducer.loading);\n  const knowledge = useSelector((state: any) => state.KnowledgeReducer.knowledge);\n  const podcasts = useSelector((state: any) => state.KnowledgeReducer.podcasts);\n  const query = useSelector((state: any) => state.KnowledgeReducer.query);\n  const [filterState, setFilterState] = useState([]);\n  const [combinedKnowledge, setCombinedKnowledge] = useState([]);\n\n  useEffect(() => {\n    dispatch({ type: SET_LOADING, payload: true });\n    axios.get(\"https://bitcoin-knowledge-bot.herokuapp.com/knowledge\")\n    .then((response: any) => {\n      dispatch({ type: SET_LOADING, payload: false });\n      dispatch({ type: UPDATE_ALL_KNOWLEDGE, payload: response.data.articles });\n      dispatch({ type: UPDATE_ALL_PODCASTS, payload: response.data.podcasts });\n      setCombinedKnowledge(response.data.articles.concat(response.data.podcasts));\n    })\n    .catch((error: any) => {\n        console.log(error)\n    })\n  },[])\n\n  useEffect(() => {\n    setFilterState(combinedKnowledge.filter(((knowledgeCard: any) =>  knowledgeCard.title.toLowerCase().includes(query.toLowerCase()))))\n  },[query])\n\n  return (\n    <View style={styles.datasetContainer} onLayout={(event) => {\n      const {height} = event.nativeEvent.layout;\n      setHeight(height);\n    }}>\n        <ScrollView style={styles.scroll}>\n        {loading ?\n          <View style={styles.chatBubbles}>\n            <ReactLoading type={'spinningBubbles'} color={\"#F2A900\"} height={\"10%\"} width={\"10%\"} />\n          </View>\n          :\n          <FlatList\n            data={query.length > 0 ? filterState : combinedKnowledge}\n            renderItem={KnowledgeComponent}\n            contentContainerStyle={styles.listView}\n          />\n        }\n        </ScrollView>\n        <View style={styles.sidebar}> \n          <MonoText style={styles.sidebarTitle}>Knowledge Data</MonoText>\n          <View style={styles.sidebarStatsContainer}>\n            <MonoText>Total Articles: {knowledge.length}</MonoText>\n            <MonoText>Total podcasts: {podcasts.length}</MonoText>\n          </View>\n          <KnowledgeInput />\n          <View style={styles.sidebarResultsContainer}>\n            <MonoText style={styles.resultsText}>Search results: {filterState.length}</MonoText>\n          </View>\n        </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  // Now I will add the breakpoints for KnowledgeContainer\n  datasetContainer: {\n    width: '100%',\n    height: '100%',\n    flexDirection: 'row',\n    padding: 2,\n    borderWidth: 4,\n    borderRightColor: '#F2A900',\n    borderTopColor: '#F2A900',\n    borderLeftColor: '#F2A900',\n    borderBottomColor: '#F2A900',\n  },\n  articleContainer: {\n    backgroundColor: 'black',\n    borderWidth: 2,\n    borderColor: '#F2A900',\n    borderRadius: 10,\n    padding: 5,\n    width: '100%',\n    marginTop: 5,\n    marginBottom: 5,\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  articleTextContainer: {\n    width: '100%',\n    margin: 'auto',\n    flexDirection: 'column',\n    paddingLeft: 3,\n    paddingRight: 3,\n  },\n  image: {\n    alignSelf: 'center',\n    marginTop: 5,\n    marginBottom: 5,\n  },\n  articleTitle: {\n    textAlign: 'center',\n    fontSize: 18,\n  },\n  articleBody: {\n    marginTop: 10,\n    marginBottom: 10,\n    color: 'black',\n    textAlign: 'center',\n    fontSize: 13,\n  },\n  listView: {\n    width: '100%',\n    padding: '1%',\n    alignItems: 'center'\n  },\n  body: {\n    width: '80%',\n  },\n  sidebar: {\n    width: '20%',\n  },\n  sidebarTitle: {\n    paddingTop: 10,\n    textAlign: 'center',\n    fontSize: 18,\n  },\n  sidebarStatsContainer: {\n    margin: 25,\n  },\n  sidebarResultsContainer: {\n    marginTop: 50,\n    margin: 25\n  },\n  resultsText: {\n    marginTop: 25,\n    fontSize: 18,\n    color: '#F2A900',\n    textAlign: 'center',\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n  scroll: {\n    height: '100%',\n    backgroundColor: '#708090',\n    borderBottomRightRadius: 10,\n  },\n  chatBubbles: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    paddingLeft: '1%'\n  },\n  buttonText: {\n    fontSize: 15,\n  },\n  button: {\n    width: '15%',\n    marginTop: '3%',\n    padding: 10,\n    borderWidth: 1,\n    borderColor: '#F2A900',\n    borderRadius: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'black',\n  }\n});\n","import { StyleSheet } from 'react-native';\nimport KnowledgeDataset from '../components/dataset/KnowledgeDataset';\nimport KnowledgeInput from '../components/dataset/KnowledgeInput';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <KnowledgeDataset path='/screens/TabTwoScreen.tsx' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      About: 'about',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"About\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Bitcoin Knowledge Bot',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          headerRight: () => (\n            <Pressable\n              onPress={() => navigation.navigate('About')}\n              style={({ pressed }) => ({\n                opacity: pressed ? 0.5 : 1,\n              })}>\n              <FontAwesome\n                name=\"info-circle\"\n                size={25}\n                color={Colors[colorScheme].orange}\n                style={{ marginRight: 15 }}\n              />\n            </Pressable>\n          ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          title: 'Knowledge Dataset',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n","import { SET_NEW_MESSAGE, SET_LOADING, UPDATE_ID } from \"./Actions\";\nimport { ChatbotState } from \"../types\";\n\nconst initialState: ChatbotState = {\n  messages: [\n    {\n        id: 1,\n        text: \"Hello World! I'm Bitcoin Knowledge Bot\",\n        name: \"Bot\"\n    },\n    {\n        id: 2,\n        text: \"I can answer most of your Bitcoin questions, but rembmember I'm just a chatbot so I might say something incorrect 'Dont trust, verify' and read the knowledge sources on your own and use your discernment\",\n        name: \"Bot\"\n    },\n    {\n        id: 3,\n        text: \"What can I answer for you?\",\n        name: \"Bot\"\n    }\n  ],\n  loading: false,\n  id: 4,\n};\n\nconst ChatbotReducer = function (state = initialState, action: any) {\n  switch (action.type) {\n    case UPDATE_ID:\n      return {\n        ...state,\n        id: action.payload,\n      };\n    case SET_NEW_MESSAGE:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default ChatbotReducer;","import {UPDATE_ARTICLES, UPDATE_ALL_KNOWLEDGE, UPDATE_QUERY, UPDATE_ALL_PODCASTS} from './Actions';\nimport { KnowledgeState, Article } from \"../types\";\n\nconst initialState: KnowledgeState = {\n    articles: [\n      {\n        url: 'https://nakamotoinstitute.org/bitcoin/',\n        image: \"https://nakamotoinstitute.org/static/img/bitcoin/transactions.svg\",\n        title: 'Bitcoin: A Peer-to-Peer Electronic Cash System',\n        body: \"A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.\",\n        type: 'article'\n      }\n    ],\n    knowledge: [],\n    podcasts: [],\n    query: ''\n  };\n  \n  const KnowledgeReducer = function (state = initialState, action: any) {\n    switch (action.type) {\n      case UPDATE_ARTICLES:\n        return {\n          ...state,\n          articles: [...state.articles, ...action.payload.slice(0, 2)],\n        };\n      case UPDATE_ALL_KNOWLEDGE:\n        return {\n          ...state,\n          knowledge: action.payload,\n        };\n      case UPDATE_ALL_PODCASTS:\n        return {\n          ...state,\n          podcasts: action.payload,\n        };\n      case UPDATE_QUERY:\n        return {\n          ...state,\n          query: action.payload,\n        };\n      default:\n        return state;\n    }\n  };\n  \n  export default KnowledgeReducer;","import { combineReducers } from 'redux';\nimport ChatbotReducer from './ChatbotReducer';\nimport KnowledgeReducer from './KnowledgeReducer';\n\nconst rootReducer = combineReducers({\n  ChatbotReducer,\n  KnowledgeReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './RootReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport { Provider } from 'react-redux';\nimport store from \"./store/Store\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Provider store={store}>\n          <Navigation colorScheme={colorScheme} />\n          <StatusBar />\n        </Provider>\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n          'noto-mono': require('../assets/fonts/NotoMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/NotoMono-Regular.ttf\";"],"sourceRoot":""}